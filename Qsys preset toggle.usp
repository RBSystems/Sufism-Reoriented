/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: BBI Engineering, Inc.
System Name: Sufism Reoriented
System Number:
Programmer: Steven Ramsey
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Q-Sys Preset Toggle"
#HINT "Preset Toggle"

#DEFINE_CONSTANT MAX_STR_LEN	 		256
#DEFINE_CONSTANT MAX_NAME_LEN			20
#DEFINE_CONSTANT MAX_PARAM_LEN			30
#DEFINE_CONSTANT N_PARAMETERS			16	

// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT connected;
DIGITAL_INPUT poll;
DIGITAL_INPUT invalidate;
DIGITAL_INPUT Preset_Toggle[N_PARAMETERS];
STRING_INPUT _SKIP_;
STRING_INPUT rx$[512];
STRING_INPUT _SKIP_;
STRING_INPUT ControlID[N_PARAMETERS][MAX_NAME_LEN];

DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_;
DIGITAL_OUTPUT Preset_FB[N_PARAMETERS];
STRING_OUTPUT _SKIP_;
STRING_OUTPUT tx$;
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ChangeGroup_ID;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
String presetNames[N_PARAMETERS][MAX_PARAM_LEN];
Integer nParams;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SendToQsys(STRING sMsgToSend)
{
	tx$ = sMsgToSend;
	ProcessLogic();
}

Function PollChangeGroup()
{    
	STRING sToSend[32];

	if(connected)
	{
		sToSend = "cgp " + ITOA(ChangeGroup_ID) + "\n";
		SendToQsys(sToSend);
	}
}

Function InitChangeGroup()
{
	STRING toSend$[256];
	Integer i;

	toSend$ = "cgc " + ITOA(ChangeGroup_ID) + "\n";
	SendToQsys(toSend$);
    for (i = 1 to nParams)
	{
		toSend$ = "cga " + ITOA(ChangeGroup_ID) + " " + presetNames[i] + "\n";
		SendToQsys(toSend$);
	}
}

String_Function itop(Integer analogInput)
{
	//assumes analog Input is scaled from 0 to 65535
	String toReturn$[256];
	Long_Integer dividend;
	Long_Integer divisor;
	Long_Integer quotient;
	Long_Integer remainder;
	Long_Integer x;
	
	toReturn$ = "";
	dividend = analogInput;
	divisor = 65535;
	
	for(x=1 to 4)
	{
		quotient = dividend / divisor;
		remainder = dividend % divisor;
		toReturn$ = toReturn$ + LTOA(quotient);
		
		if (x = 1)
			toReturn$ = toReturn$ + ".";
		
		//set new dividend
		dividend = remainder * 10;
	}
	
	Return (toReturn$);
}

Integer_Function ptoi(String positionString$)
{
	Integer toReturn;
	Integer maxAnalog;
	Integer val;
	Integer nDigits;
	String junk$[16];
	String currentDigit$[16];
	
	maxAnalog = 65535;
	
	if (positionString$ = "1\r\n" || positionString$ = "1 ")
		toReturn = maxAnalog;
	else if (positionString$ = "0\r\n" || positionString$ = "0 ")
		toReturn = 0;
	else
	{
		//start after 0.
		if (len(positionString$) < 3)
			Return (0);
		junk$ = REMOVEBYLENGTH(2,positionString$);
		nDigits = len(positionString$) - 2;
		if (nDigits > 4)
		{
			positionString$ = Left(positionString$, 4);
			nDigits = 4;
		}
		val = ATOI(positionString$);
		switch (nDigits)
		{
			case (1):
			{
				toReturn = val * 6553 + val / 2;
			}
			case (2):
			{
				toReturn = val * 655 + val * 7 / 20;
			}
			case (3):
			{
				toReturn = val * 65 + val / 2 + val * 7 / 200;
			}
			case (4):
			{
				toReturn = val * 6 + val / 2 + val / 20 + val * 7 / 2000;
			}
			default:
			{
				toReturn = 0;
			}
		}
	}
	Return (toReturn);
}

Function ParsePreset(String incoming$)
{
	Integer i;
    
	if (!find("cv", incoming$))
		return;
	for (i = 1 to nParams)
	{
		if (!find(presetNames[i], incoming$))
			continue;
		// found it
		if (find("true", incoming$))
			Preset_FB[i] = 1;
		else
			Preset_FB[i] = 0;
		break;
	}
}
     
Function DoPreset(Integer which, Integer val)
{
	STRING sToSend[256];

	//send Qsys command
	MakeString(sToSend, "csv %s %d\n", presetNames[which], val);
	SendToQsys(sToSend);
	CancelAllWait();
	Wait (10, DelayedPollPreset) PollChangeGroup();
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Preset_Toggle
{
    INTEGER lastModifiedIndex;
	
	lastModifiedIndex = GetLastModifiedArrayIndex();

	DoPreset(lastModifiedIndex, 1);
}

threadsafe CHANGE rx$
{
	String incoming$[MAX_STR_LEN];

	incoming$ = rx$;
	ParsePreset(incoming$);
}
 
PUSH Connected
{
	InitChangeGroup();
}

PUSH poll
{
	PollChangeGroup();
}

PUSH invalidate
{
	STRING sToSend[32];
	
	if(connected)
	{
		sToSend = "cgi " + ITOA(ChangeGroup_ID) + "\n";
		SendToQsys(sToSend);
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	integer i;

    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
    WaitForInitializationComplete();
                
	// let's build the parameter names
	nParams = 0;
	for (i = 1 to N_PARAMETERS)
	{
		if (len(ControlID[i]) > 0)
		{
			presetNames[i] = ControlID[i];
			nParams = nParams + 1;
		}
		else
			break;
	}
}
