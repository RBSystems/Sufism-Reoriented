/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Programmer: N. Hicks
Comments: A module to communicate with a Qsys IP Phone.
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#DEFINE_CONSTANT STRING_LENGTH_MAX 64
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
A module to communicate with a Qsys IP Phone.

DIGITAL_INPUT	diClientConnected	must be connected to the connect feedback from the Qsys Core Module.
BUFFER_INPUT	siRx				must be connected to the devices serial output of the Qsys Core Module.
STRING_OUTPUT	soTx				must be connected to the devices serial input of the Qsys Core Module.
DIGITAL_INPUT	diChangeGroupPoll		may be used to poll the Qsys Core for changes.
DIGITAL_INPUT	diChangeGroupInvalidate	may be used to poll the Qsys Core for all control ids associated with the Module's changegroup.

Changes to any inputs will push value to Qsys Core. All toggle logic is processed from Qsys core unless otherwise noted. All analog values are from 0 to 65535 unless otherwise noted. Corresponding scale in Qsys will vary according to Qsys settings.

DIGITAL_INPUT	diInputMute			toggle input mute
DIGITAL_INPUT	diInputInvert		toggle input invert

DIGITAL_INPUT	diOutputMute		toggle output mute
DIGITAL_INPUT	diOutputInvert		toggle output invert
DIGITAL_INPUT	diOutputClipHold	toggle output clip hold

DIGITAL_INPUT	diDoNotDisturb		toggle do not disturb
DIGITAL_INPUT	diAutoAnswer		toggle autoanswer
DIGITAL_INPUT	diHangUp			trigger hang up
DIGITAL_INPUT	diDial				trigger dial
DIGITAL_INPUT	diBackspace			trigger backspace
DIGITAL_INPUT	diClear				trigger clear

DIGITAL_INPUT	diNumpadCharAstk	trigger push *
DIGITAL_INPUT	diNumpadCharHash	trigger push #
DIGITAL_INPUT	diNumpadDigit0		trigger push 0
DIGITAL_INPUT	diNumpadDigit[9]	trigger push digits 1-9

ANALOG_INPUT	aiAutoanswerRings	set number of rings before answer
				aiInputGain			set input gain
				aiOutputGain		set output gain

Outputs provide feedback for touchpanel. Inputs have corresponding outputs. Exceptions noted below.

DIGITAL_OUTPUT	doOffHookFeedback		off hook feedback
				doRingingStateFeedback	ringing state feedback
				doOutputClipFeedback	output clip feedback
				
ANALOG_OUTPUT	aoInputPeakLevel		input meter feedback
				aoOutputPeakLevel		output meter feedback

STRING_OUTPUT	soAutoAnswerRings		number of rings before auto answer as a string
				soCallProgress			call progress description
				soDialString			feedback of current string to dial. updates with each button trigger above.

Analog signals may be connected to an input as well as the corresponding analog output.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	diClientConnected;
DIGITAL_INPUT	diChangeGroupPoll;
DIGITAL_INPUT	diChangeGroupInvalidate;

BUFFER_INPUT	_SKIP_;
BUFFER_INPUT	siRx[10000];
BUFFER_INPUT	_SKIP_;

DIGITAL_INPUT	_SKIP_;
DIGITAL_INPUT	diInputMute;
DIGITAL_INPUT	diInputInvert;
DIGITAL_INPUT	diOutputMute;
DIGITAL_INPUT	diOutputInvert;
DIGITAL_INPUT	diOutputClipHold;
DIGITAL_INPUT	diDoNotDisturb;
DIGITAL_INPUT	diAutoAnswer;
DIGITAL_INPUT	diHangUp;
DIGITAL_INPUT	diDial;
DIGITAL_INPUT	diBackspace;
DIGITAL_INPUT	diClear;
DIGITAL_INPUT	diNumpadCharAstk;
DIGITAL_INPUT	diNumpadCharHash;
DIGITAL_INPUT	diNumpadDigit0;
DIGITAL_INPUT	diNumpadDigit[9];

ANALOG_INPUT	aiAutoanswerRings,
				aiInputGain,
				aiOutputGain;

STRING_OUTPUT _SKIP_;
STRING_OUTPUT	soTx;
STRING_OUTPUT _SKIP_;

DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT	doInputMuteFeedback;
DIGITAL_OUTPUT	doInputInvertFeedback;
DIGITAL_OUTPUT	doOutputMuteFeedback;
DIGITAL_OUTPUT	doOutputInvertFeedback;
DIGITAL_OUTPUT	doOutputClipHoldFeedback;
DIGITAL_OUTPUT	doOffHookFeedback;
DIGITAL_OUTPUT	doRingingStateFeedback;
DIGITAL_OUTPUT	doOutputClipFeedback;
				
DIGITAL_OUTPUT	doDoNotDisturbFeedback;
DIGITAL_OUTPUT	doAutoAnswerFeedback;
DIGITAL_OUTPUT	doHangUpFeedback;
DIGITAL_OUTPUT	doDialFeedback;
DIGITAL_OUTPUT	doBackspaceFeedback;
DIGITAL_OUTPUT	doClearFeedback;
DIGITAL_OUTPUT	doNumpadCharAstkFeedback;
DIGITAL_OUTPUT	doNumpadCharHashFeedback;
DIGITAL_OUTPUT	doNumpadDigit0Feedback;
DIGITAL_OUTPUT	doNumpadDigitFeedback[9];

ANALOG_OUTPUT	aoInputGain,
				aoInputPeakLevel,
				aoOutputGain,
				aoOutputPeakLevel,
				aoAutoanswerRings;

STRING_OUTPUT	soAutoAnswerRings,
				soCallProgress,
				soDialString;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
INTEGER_PARAMETER ipChangeGroup;

// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER
STRING_PARAMETER spPhoneName[STRING_LENGTH_MAX];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE QSYS_VARIABLE_STRUCTURE
{
    STRING 	sLabel[STRING_LENGTH_MAX];
    STRING	sString[STRING_LENGTH_MAX];
    INTEGER	iValue;
    INTEGER	iPosition;	// PERCENTAGE (*100 TO MAKE INTEGER INSTEAD OF FLOAT)
};

STRUCTURE QSYS_METADATA_STRUCTURE
{
    STRING 	sLabel[STRING_LENGTH_MAX];
	INTEGER iAspect; // 6 is the "disabled" aspect
    STRING	sString[STRING_LENGTH_MAX];
    INTEGER	iValue;
    INTEGER	iPosition;	// PERCENTAGE (*100 TO MAKE INTEGER INSTEAD OF FLOAT)
};

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
INTEGER iBackspaceDisabled,
		iClearDisabled,
		iDisconnectDisabled,
		iConnectDisabled;
INTEGER iAutoAnswer,
		iAutoanswerRings,
		iDoNotDisturb,
		iOffHook,
		iRingingState,
		iInputGain,
		iInputInvert,
		iInputMute,
		iInputPeakLevel,
		iOutputClip,
		iOutputClipHold,
		iOutputGain,
		iOutputInvert,
		iOutputMute,
		iOutputPeakLevel;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
STRING sAutoAnswerRings[STRING_LENGTH_MAX],
		sCallProgress[STRING_LENGTH_MAX],
		sDialString[STRING_LENGTH_MAX];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function SendToQsys(STRING sMsgToSend)
{
	soTx = sMsgToSend;
	ProcessLogic();
}

Function InitializeDSP()
{
    // CREATE CHANGE GROUPS AND ADD VARIABLES TO THEM
    // XCOUNTER IS JUST A GENERIC COUNTER VARIABLE
    INTEGER xCounter;
	STRING toSend$[256];   

    // ADD CHANGE GROUP
	toSend$ = "cgc " + ITOA(ipChangeGroup) + "\n";
    SendToQsys(toSend$);
    
    /*****************************************************************/
    // ADD NAMED CONTROLS FOR EACH CONTROL THAT NEEDS TO BE ADDED
    // THIS NEEDS TO BE CUSTOMIZED FOR EACH DESIGN AND BLOCK CONTROLLED
    /*****************************************************************/
	toSend$ = "cga " + ITOA(ipChangeGroup) + " In" + spPhoneName + "channel1InputGain\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " In" + spPhoneName + "channel1InputInvert\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " In" + spPhoneName + "channel1InputMute\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " In" + spPhoneName + "channel1InputPeakLevel\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Out" + spPhoneName + "channel1Clip\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Out" + spPhoneName + "channel1ClipHold\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Out" + spPhoneName + "channel1OutputGain\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Out" + spPhoneName + "channel1OutputInvert\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Out" + spPhoneName + "channel1OutputMute\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Out" + spPhoneName + "channel1OutputPeakLevel\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "Autoanswer\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "AutoanswerRings\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "Backspace\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "CallProgress\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "Clear\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "Connect\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "DialString\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "Disconnect\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "DoNotDisturb\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "OffHook\n";
	SendToQsys(toSend$);
	
	toSend$ = "cga " + ITOA(ipChangeGroup) + " Status" + spPhoneName + "Ringing(state)\n";
	SendToQsys(toSend$);
}

// FUNCTIONAL THAT PARSES VARIABLES
function PARSE_PHONE_VARIABLES(QSYS_VARIABLE_STRUCTURE stControl)
{
    STRING 	varName$[64];
	STRING 	junk$[64];
    
    varName$ = stControl.sLabel;
	
	if(FIND("Status",varName$) = 1) //"Status" at 1st char
	{
		if(FIND("AutoanswerRings",varName$))
		{
			sAutoanswerRings = stControl.sString;
			soAutoanswerRings = sAutoanswerRings;
			iAutoanswerRings = stControl.iValue;
			aoAutoanswerRings = iAutoanswerRings;
		}
		else if(FIND("Autoanswer",varName$))
		{
			iAutoanswer = stControl.iValue;
			doAutoanswerFeedback = iAutoanswer;
		}
		else if(FIND("CallProgress",varName$))
		{
			sCallProgress = stControl.sString;
			soCallProgress = sCallProgress;
		}
		else if(FIND("DialString",varName$))
		{
			sDialString = stControl.sString;
			soDialString = sDialString;
		}
		else if(FIND("DoNotDisturb",varName$))
		{
			iDoNotDisturb = stControl.iValue;
			doDoNotDisturbFeedback = iDoNotDisturb;
		}
		else if(FIND("OffHook",varName$))
		{
			iOffHook = stControl.iValue;
			doOffHookFeedback = iOffHook;
		}
		else if(FIND("Ringing(state)",varName$))
		{
			iRingingState = stControl.iValue;
			doRingingStateFeedback = iRingingState;
		}
	}
	else if(FIND("In",varName$) = 1) //"In" at 1st char
	{
		if(FIND("Gain",varName$))
		{
			iInputGain = stControl.iPosition;
			aoInputGain = iInputGain;
		}
		else if(FIND("Invert",varName$))
		{
			iInputInvert = stControl.iValue;
			doInputInvertFeedback = iInputInvert;
		}
		else if(FIND("Mute",varName$))
		{
			iInputMute = stControl.iValue;
			doInputMuteFeedback = iInputMute;
		}
		else if(FIND("PeakLevel",varName$))
		{
			iInputPeakLevel = stControl.iPosition;
			aoInputPeakLevel = iInputPeakLevel;
		}
	}
	else if(FIND("Out",varName$) = 1) //"In" at 1st char
	{
		if(FIND("ClipHold",varName$))
		{
			iOutputClipHold = stControl.iValue;
			doOutputClipHoldFeedback = iOutputClipHold;
		}
		else if(FIND("Clip",varName$))
		{
			iOutputClip = stControl.iValue;
			doOutputClipFeedback = iOutputClip;
		}
		else if(FIND("Gain",varName$))
		{
			iOutputGain = stControl.iPosition;
			aoOutputGain = iOutputGain;
		}
		else if(FIND("Invert",varName$))
		{
			iOutputInvert = stControl.iValue;
			doOutputInvertFeedback = iOutputInvert;
		}
		if(FIND("Mute",varName$))
		{
			iOutputMute = stControl.iValue;
			doOutputMuteFeedback = iOutputMute;
		}
		else if(FIND("PeakLevel",varName$))
		{
			iOutputPeakLevel = stControl.iPosition;
			aoOutputPeakLevel = iOutputPeakLevel;
		}
	}
}

// FUNCTIONAL THAT PARSES METADATA
function PARSE_METADATA(QSYS_METADATA_STRUCTURE stMetadata)
{
    STRING 	varName$[64];
	STRING 	junk$[64];
    
    varName$ = stMetadata.sLabel;
	
	if(FIND("Backspace",varName$))
	{
		iBackspaceDisabled = stMetadata.iValue;
	}
	if(FIND("Clear",varName$))
	{
		iClearDisabled = stMetadata.iValue;
	}
	if(FIND("Connect",varName$))
	{
		iConnectDisabled = stMetadata.iValue;
	}
	if(FIND("Disconnect",varName$))
	{
		iDisconnectDisabled = stMetadata.iValue;
	}
}

String_Function analogToPositionStringConversion(Integer analogInput)
{
	//assumes analog Input is scaled from 0 to 65535
	String toReturn$[256];
	Long_Integer dividend;
	Long_Integer divisor;
	Long_Integer quotient;
	Long_Integer remainder;
	Long_Integer x;
	
	toReturn$ = "";
	dividend = analogInput;
	divisor = 65535;
	
	for(x=1 to 5)
	{
		quotient = dividend / divisor;
		remainder = dividend % divisor;
		toReturn$ = toReturn$ + LTOA(quotient);
		
		if (x = 1)
			toReturn$ = toReturn$ + ".";
		
		//set new dividend
		dividend = remainder * 10;
	}
	
	//Print ("%u becomes %s", analogInput, toReturn$);
	
	Return (toReturn$);
}

Integer_Function stringPositionToAnalogConversation(String positionString$)
{
	Integer toReturn;
	Integer maxAnalog;
	Integer divisor;
	Integer x;
	String junk$[16];
	String currentDigit$[16];
	
	maxAnalog = 65535;
	
	if (positionString$ = "1\n")
		toReturn = maxAnalog;
	else if (positionString$ = "0\n")
		toReturn = 0;
	else
	{
		toReturn = 0;
		divisor = 10;
		//start after 0.
		junk$ = REMOVEBYLENGTH(2,positionString$);
		for(x=3 to 8)
		{
			currentDigit$ = REMOVEBYLENGTH(1,positionString$);
			toReturn = toReturn + maxAnalog * ATOI(currentDigit$)  / divisor;
			divisor = divisor * 10;
		}
	}
	Return (toReturn);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH diClientConnected
{
	InitializeDSP();
}

PUSH diChangeGroupPoll
{
	STRING sToSend[256];
	
	if(diClientConnected)
	{
		sToSend = "cgp " + ITOA(ipChangeGroup) + "\n";
		SendToQsys(sToSend);
	}
}

PUSH diChangeGroupInvalidate
{
	STRING sToSend[256];
	
	if(diClientConnected)
	{
		sToSend = "cgi " + ITOA(ipChangeGroup) + "\n";
		SendToQsys(sToSend);
	}
}

//CHANGE siRx
THREADSAFE CHANGE siRx
{
	//INTEGER xCounter;	// UTILITY COUNTER VARIABLE
    QSYS_VARIABLE_STRUCTURE stControl;
	QSYS_METADATA_STRUCTURE stMetadata;
    STRING forParsing$[256];	// TO STORE A SINGLE LINE OF RESPONSE FOR PARSING
	STRING junk$[256];			// FOR UNUSED REMOVED STRINGS

    // SCAN THROUGH ALL RESPONSES, CONVERT DATA TO :
    // - LABEL
    // - VALUE
    // - STRING
    // - POSITION
    // PASS TO PARSER

	WHILE (1)
	{
		TRY
		{		
			//forParsing$ = REMOVE("\n",siRx);
			forParsing$ = GATHER("\n", siRx);

			if(FIND("cgpa",forParsing$) || FIND("cv",forParsing$) || FIND("cmv",forParsing$))
			{
			
				// IF forParsing$ HAS NO LENGTH, THEN THIS IS AN EMPTY LINE SO DISCARD
				// IF forParsing$ DOES NOT CONTAIN THE MIXER NAME THEN DISCARD
				// IF forParsing$ DOES NOT CONTAIN CV THEN DISCARD (CV IS RETURNED FOR EACH CHANGE CONTROL RESPONSE)
				IF ((LEN(forParsing$) > 1) && FIND(spPhoneName,forParsing$))
				{
					IF(FIND("cv",forParsing$))
					{
					    // PARSE CONTROL CHANGES
						// INITIALIZE TEMP PARAMETERS JUST IN CASE
						stControl.sLabel = "INITIALIZED VALUE";
						stControl.sString = "INITIALIZED VALUE";
						stControl.iValue = 12345;
						stControl.iPosition = 12345;
				
						// PARSE RESPONSE
						junk$ = REMOVE("cv \"",forParsing$);
						stControl.sLabel = REMOVE("\" \"",forParsing$);
						stControl.sLabel = LEFT(stControl.sLabel, LEN(stControl.sLabel)-3);
						stControl.sString = REMOVE("\" ",forParsing$);
						stControl.sString = LEFT(stControl.sString, LEN(stControl.sString)-2);
						stControl.iValue = ATOI(REMOVE(" ",forParsing$));
						stControl.iPosition = stringPositionToAnalogConversation(forParsing$);
						
						PARSE_PHONE_VARIABLES(stControl);
					}
					ELSE IF(FIND("cmv",forParsing$))
					{
						// PARSE CONTROL CHANGES
						// INITIALIZE TEMP PARAMETERS JUST IN CASE
						stMetadata.sLabel = "INITIALIZED VALUE";
						stMetadata.sString = "INITIALIZED VALUE";
						stMetadata.iAspect = 12345;
						stMetadata.iValue = 12345;
						stMetadata.iPosition = 12345;
				
						// PARSE RESPONSE
						junk$ = REMOVE("cmv \"",forParsing$);
						stMetadata.sLabel = REMOVE("\" ",forParsing$);
						stMetadata.sLabel = LEFT(stMetadata.sLabel, LEN(stMetadata.sLabel)-2);
						stMetadata.iAspect = ATOI(REMOVE(" \"",forParsing$));
						stMetadata.sString = REMOVE("\" ",forParsing$);
						stMetadata.sString = LEFT(stMetadata.sString, LEN(stMetadata.sString)-2);
						stMetadata.iValue = ATOI(REMOVE(" ",forParsing$));
						stMetadata.iPosition = stringPositionToAnalogConversation(forParsing$);
						
						PARSE_METADATA(stMetadata);
					}
				}
			}
		}
		CATCH
		{

		}
	}
}

PUSH diInputMute
{
	STRING toSend$[256];
	
	//update structure
	iInputMute = (iInputMute + 1) MOD 2;
	
	//send feedback
	doInputMuteFeedback = iInputMute;
	
	//send Qsys command
	toSend$ = "csvr In" + spPhoneName + "channel1InputMute " + ITOA(iInputMute) + " 0\n";
	SendToQsys(toSend$);
}

PUSH diInputInvert
{
	STRING toSend$[256];
	
	//update structure
	iInputInvert = (iInputInvert + 1) MOD 2;
	
	//send feedback
	doInputInvertFeedback = iInputInvert;
	
	//send Qsys command
	toSend$ = "csvr In" + spPhoneName + "channel1InputInvert " + ITOA(iInputInvert) + " 0\n";
	SendToQsys(toSend$);
}

PUSH diOutputMute
{
	STRING toSend$[256];
	
	//update structure
	iOutputMute = (iOutputMute + 1) MOD 2;
	
	//send feedback
	doOutputMuteFeedback = iOutputMute;
	
	//send Qsys command
	toSend$ = "csvr Out" + spPhoneName + "channel1OutputMute " + ITOA(iOutputMute) + " 0\n";
	SendToQsys(toSend$);
}

PUSH diOutputInvert
{
	STRING toSend$[256];
	
	//update structure
	iOutputInvert = (iOutputInvert + 1) MOD 2;
	
	//send feedback
	doOutputInvertFeedback = iOutputInvert;
	
	//send Qsys command
	toSend$ = "csvr Out" + spPhoneName + "channel1OutputInvert " + ITOA(iOutputInvert) + " 0\n";
	SendToQsys(toSend$);
}

PUSH diOutputClipHold
{
	STRING toSend$[256];
	
	//update structure
	iOutputClipHold = (iOutputClipHold + 1) MOD 2;
	
	//send feedback
	doOutputClipHoldFeedback = iOutputClipHold;
	
	//send Qsys command
	toSend$ = "csvr Out" + spPhoneName + "channel1ClipHold " + ITOA(iOutputClipHold) + " 0\n";
	SendToQsys(toSend$);
}

PUSH diDoNotDisturb
{
	STRING toSend$[256];
	
	//update structure
	iDoNotDisturb = (iDoNotDisturb + 1) MOD 2;
	
	//send feedback
	doDoNotDisturbFeedback = iDoNotDisturb;
	
	//send Qsys command
	toSend$ = "csvr Status" + spPhoneName + "DoNotDisturb " + ITOA(iDoNotDisturb) + " 0\n";
	SendToQsys(toSend$);
}

PUSH diAutoAnswer
{
	STRING toSend$[256];
	
	//update structure
	iAutoAnswer = (iAutoAnswer + 1) MOD 2;
	
	//send feedback
	doAutoAnswerFeedback = iAutoAnswer;
	
	//send Qsys command
	
	toSend$ = "csvr Status" + spPhoneName + "Autoanswer " + ITOA(iAutoAnswer) + " 0\n";
	SendToQsys(toSend$);
}

PUSH diHangUp
{
	STRING toSend$[256];
	
	IF(!iDisconnectDisabled)
	{
		doHangUpFeedback = 1;
		
		//send Qsys trigger
		toSend$ = "ct Status" + spPhoneName + "Disconnect\n";
		SendToQsys(toSend$);
	}
}

RELEASE diHangUp
{
	doHangUpFeedback = 0;
}

PUSH diDial
{
	STRING toSend$[256];
	
	IF(!iConnectDisabled)
	{
		doDialFeedback = 1;
		
		//send Qsys trigger
		toSend$ = "ct Status" + spPhoneName + "Connect\n";
		SendToQsys(toSend$);
	}
}

RELEASE diDial
{
	doDialFeedback = 0;
}

PUSH diBackspace
{
	STRING toSend$[256];
	
	IF(!iBackspaceDisabled)
	{
		doBackspaceFeedback = 1;
		
		//send Qsys trigger
		toSend$ = "ct Status" + spPhoneName + "Backspace\n";
		SendToQsys(toSend$);
	}
}

RELEASE diBackspace
{
	doBackspaceFeedback = 0;
}

PUSH diClear
{
	STRING toSend$[256];
	
	IF(!iClearDisabled)
	{
		doClearFeedback = 1;
		
		//send Qsys trigger
		toSend$ = "ct Status" + spPhoneName + "Clear\n";
		SendToQsys(toSend$);
	}
}

RELEASE diClear
{
	doClearFeedback = 0;
}

PUSH diNumpadCharAstk
{
	STRING toSend$[256];

	doNumpadCharAstkFeedback = 1;
	
	//send Qsys trigger
	toSend$ = "ct Status" + spPhoneName + "PinPad*\n";
	SendToQsys(toSend$);
}

RELEASE diNumpadCharAstk
{
	doNumpadCharAstkFeedback = 0;
}

PUSH diNumpadCharHash
{
	STRING toSend$[256];

	doNumpadCharHashFeedback = 1;
	
	//send Qsys trigger
	toSend$ = "ct Status" + spPhoneName + "PinPad#\n";
	SendToQsys(toSend$);
}

RELEASE diNumpadCharHash
{
	doNumpadCharHashFeedback = 0;
}

PUSH diNumpadDigit0
{
	STRING toSend$[256];

	doNumpadDigit0Feedback = 1;
	
	//send Qsys trigger
	toSend$ = "ct Status" + spPhoneName + "PinPad0\n";
	SendToQsys(toSend$);
}

RELEASE diNumpadDigit0
{
	doNumpadDigit0Feedback = 0;
}

PUSH diNumpadDigit
{
	INTEGER lastModifiedIndex;
	STRING toSend$[256];
	
	lastModifiedIndex = GetLastModifiedArrayIndex();
	doNumpadDigitFeedback[lastModifiedIndex] = 1;
	
	//send Qsys trigger
	toSend$ = "ct Status" + spPhoneName + "PinPad" + ITOA(lastModifiedIndex) + "\n";
	SendToQsys(toSend$);
}

RELEASE diNumpadDigit
{
	INTEGER lastModifiedIndex;
	lastModifiedIndex = GetLastModifiedArrayIndex();
	doNumpadDigitFeedback[lastModifiedIndex] = 0;
}

CHANGE aiAutoanswerRings
{
	STRING toSend$[256];
	
	if(aiAutoanswerRings = iAutoanswerRings)
	{
		//do nothing
	}
	else
	{
		iAutoanswerRings = aiAutoanswerRings;
		soAutoanswerRings = ITOA(iAutoanswerRings);
		toSend$ = "csvr Status" + spPhoneName + "AutoanswerRings " + ITOA(iAutoanswerRings) + " 0\n";
		SendToQsys(toSend$);
	}
}

CHANGE aiInputGain
{
	STRING toSend$[256];
	
	if(aiInputGain = iInputGain) // if redundant
	{
		//do nothing
	}
	else
	{
		iInputGain = aiInputGain;
		aoInputGain = iInputGain;	
		
		//send Qsys command
		toSend$ = "cspr In" + spPhoneName + "channel1InputGain " + analogToPositionStringConversion(iInputGain) + " 0\n";
		SendToQsys(toSend$);
	}
}

CHANGE aiOutputGain
{
	STRING toSend$[256];
	
	if(aiOutputGain = iOutputGain) // if redundant
	{
		//do nothing
	}
	else
	{
		iOutputGain = aiOutputGain;
		aoOutputGain = iOutputGain;	
		
		//send Qsys command
		toSend$ = "cspr Out" + spPhoneName + "channel1OutputGain " + analogToPositionStringConversion(iOutputGain) + " 0\n";
		SendToQsys(toSend$);
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

