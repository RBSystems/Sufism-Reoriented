/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: BBI Engineering, Inc.
System Name: Qualcomm N Auditorium
System Number:
Programmer: Sam Wong
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "N-Hall Q-sys Controls"
// #HINT ""

#DEFINE_CONSTANT 	MAX_STR_LEN	 				256
#DEFINE_CONSTANT	PA_POWER_ON_ID				"PA_AMP_ON_T"
#DEFINE_CONSTANT	PA_POWER_OFF_ID				"PA_AMP_OFF_T"
#DEFINE_CONSTANT    PA_POWER_STATUS_ID			"PA_AMP_ON_S"
#DEFINE_CONSTANT 	CINE_POWER_ON_ID			"CINE_AMP_ON_T"
#DEFINE_CONSTANT	CINE_POWER_OFF_ID			"CINE_AMP_OFF_T"
#DEFINE_CONSTANT	CINE_POWER_STATUS_ID		"CINE_AMP_ON_S"
#DEFINE_CONSTANT	MUTE_ALL_ID					"MUTE_ALL_T"
#DEFINE_CONSTANT	UNMUTE_ALL_ID				"UNMUTE_ALL_T"
#DEFINE_CONSTANT    MUTE_ALL_STATUS_ID			"MUTE_ALL_S"
#DEFINE_CONSTANT	LOAD_DEFAULTS_ID			"LOAD_DEFAULT_T"

// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, connected;
DIGITAL_INPUT poll, invalidate, _SKIP_;
DIGITAL_INPUT Mute_Toggle, _SKIP_;
DIGITAL_INPUT Cine_Amp_On, Cine_Amp_Off;
DIGITAL_INPUT PA_Amp_On, PA_Amp_Off;
DIGITAL_INPUT Load_Defaults;
STRING_INPUT _SKIP_;
STRING_INPUT rx$[512];


DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, Mute_Is_On, Mute_Is_Off;
DIGITAL_OUTPUT Cine_Amp_Is_On, Cine_Amp_Is_Off;
DIGITAL_OUTPUT PA_Amp_Is_On, PA_Amp_Is_Off;
STRING_OUTPUT _SKIP_, _SKIP_;
STRING_OUTPUT tx$;


/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ChangeGroup_ID;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SendToQsys(STRING sMsgToSend)
{
	tx$ = sMsgToSend;
	ProcessLogic();
}
 
Function InitChangeGroup()
{
	STRING toSend$[256];

	toSend$ = "cgc " + ITOA(ChangeGroup_ID) + "\n";
	SendToQsys(toSend$);
	toSend$ = "cga " + ITOA(ChangeGroup_ID) + " " + PA_POWER_STATUS_ID + "\n";
	SendToQsys(toSend$);
	toSend$ = "cga " + ITOA(ChangeGroup_ID) + " " + CINE_POWER_STATUS_ID + "\n";
	SendToQsys(toSend$);
	toSend$ = "cga " + ITOA(ChangeGroup_ID) + " " + MUTE_ALL_STATUS_ID + "\n";
	SendToQsys(toSend$);
}
     
Function PollChangeGroup()
{
	STRING sToSend[32];

	if(connected)
	{
		sToSend = "cgp " + ITOA(ChangeGroup_ID) + "\n";
		SendToQsys(sToSend);
	}
}

Function ParseLogic(String incoming$)
{
	Integer i;
    
	if (!find("cv", incoming$))
		return;
	if (find(PA_POWER_STATUS_ID, incoming$))
	{
		// found it
		if (find("true", incoming$))
		{
			PA_Amp_Is_On = 1;
			PA_Amp_Is_Off = 0;
		}
		else if (find("false", incoming$))
		{
			PA_Amp_Is_On = 0;
			PA_Amp_Is_Off = 1;
		}
	}
	else if (find(CINE_POWER_STATUS_ID, incoming$))
	{
		// found it
		if (find("true", incoming$))
		{
			Cine_Amp_Is_On = 1;
			Cine_Amp_Is_Off = 0;
		}
		else if (find("false", incoming$))
		{
			Cine_Amp_Is_On = 0;
			Cine_Amp_Is_Off = 1;
		}
	}
	else if (find(MUTE_ALL_STATUS_ID, incoming$))
	{
		// found it
		if (find("true", incoming$))
		{
			Mute_Is_On = 1;
			Mute_Is_Off = 0;
		}
		else if (find("false", incoming$))
		{
			Mute_Is_On = 0;
			Mute_Is_Off = 1;
		}
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Mute_Toggle
{
	String cmd[32];
	if (Mute_Is_On)
		cmd = "ct " + UNMUTE_ALL_ID + "\n";
	else
		cmd = "ct " + MUTE_ALL_ID + "\n";
	SendToQsys(cmd);
	Wait (25) PollChangeGroup();
}
       
PUSH Cine_Amp_On
{
	String cmd[32];
	cmd = "ct " + CINE_POWER_ON_ID + "\n";
	SendToQsys(cmd);
	Wait (25) PollChangeGroup();
}

PUSH Cine_Amp_Off
{
	String cmd[32];
	cmd = "ct " + CINE_POWER_OFF_ID + "\n";
	SendToQsys(cmd);
	Wait (25) PollChangeGroup();
}

PUSH PA_Amp_On
{
	String cmd[32];
	cmd = "ct " + PA_POWER_ON_ID + "\n";
	SendToQsys(cmd);
	Wait (25) PollChangeGroup();
}

PUSH PA_Amp_Off
{
	String cmd[32];
	cmd = "ct " + PA_POWER_OFF_ID + "\n";
	SendToQsys(cmd);
	Wait (25) PollChangeGroup();
}

PUSH Load_Defaults
{
	String cmd[32];
	cmd = "ct " + LOAD_DEFAULTS_ID + "\n";
	SendToQsys(cmd);
	Wait (25) PollChangeGroup();
}

threadsafe CHANGE rx$
{
	String incoming$[MAX_STR_LEN];

	incoming$ = rx$;
	ParseLogic(incoming$);
}
 
PUSH Connected
{
	InitChangeGroup();
}

PUSH poll
{
	PollChangeGroup();
}

PUSH invalidate
{
	STRING sToSend[32];
	
	if(connected)
	{
		sToSend = "cgi " + ITOA(ChangeGroup_ID) + "\n";
		SendToQsys(sToSend);
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
	WaitForInitializationComplete();
}
*/

