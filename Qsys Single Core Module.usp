/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Programmer: N. Hicks
Comments: A module to coordinate  communication between a TCP/IP Client and Qsys Device Moudles.
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Qsys Single Core Module"
// #HINT ""
// #DEFINE_CONSTANT
#DEFINE_CONSTANT STRING_LENGTH_MAX 64
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
The Qsys Single Core Module is the module responsible for logging in and exchanging messages between a TCP/IP Client and other Qsys Device Moudles.
Digital Input "ConnectF" must tie to the Connect-F output of the TCP/IP Client.
Buffer Input "FromClient" must tie to the serial output of the TCP/IP Client.
Buffer Input "FromDevices" may be wired to the output of multiple Qsys Devices modules.
Digital Output "Connect" must tie to the input of the Connect input on the TCP/IP Client.
Digital Output "ConnectFToDevices" must connect to the Connect F inputs on Qsys Device Modules.
String Output "ToClient" must connect to the serial input of the TCP/IP Client.
String Output "ToDevices" must connect to the serial inputs of the Qsys Device Modules.

A username and pin may be provided as paramters if required by the Qsys design. If the core does not require a username and pin then this will not affect the performance of the modules.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
DIGITAL_INPUT _SKIP_, _SKIP_;
DIGITAL_INPUT ConnectF;
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 
BUFFER_INPUT FromClient[10000];
BUFFER_INPUT FromDevices[10000];

// DIGITAL_OUTPUT
DIGITAL_OUTPUT _SKIP_, _SKIP_; 
DIGITAL_OUTPUT Connect;
DIGITAL_OUTPUT ConnectFToDevices;
// ANALOG_OUTPUT 
// STRING_OUTPUT 
STRING_OUTPUT ToClient;
STRING_OUTPUT ToDevices;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER
STRING_PARAMETER spUsername[STRING_LENGTH_MAX];
STRING_PARAMETER spPin[STRING_LENGTH_MAX];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
INTEGER iLoggedIn;
INTEGER iPrimary;
INTEGER iActive;
INTEGER iSequence;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
STRING sDesignName[STRING_LENGTH_MAX];
STRING sDesignID[STRING_LENGTH_MAX];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SendToQsys(STRING sMsgToSend)
{
	ToClient = sMsgToSend;
	ProcessLogic();
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

threadsafe CHANGE fromClient
{
	//INTEGER xCounter;	// UTILITY COUNTER VARIABLE
	STRING forParsing$[256];	// TO STORE A SINGLE PARSED LINE
	STRING toSend$[256];		// TO STORE A SINGLE LINE FOR SENDING
	STRING junk$[256];			// FOR UNUSED REMOVED STRINGS

  try
  {  
	while(1)
	{
		//  PARSE RESPONSE STRING AND PERFORM APPROPRIATE ACTION
	
		forParsing$ = GATHER("\n", fromClient);
		//	CHECK FOR LOGIN RESPONSE, DETERMINE IF FAILED OR IF SUCCESS
		//	IF FAILED, CLOSE CONNECTION, RAISE FLAG AND TRY AGAIN
	    IF(FIND("login_failed",forParsing$))
		{
			iLoggedIn = 0;
			ConnectFToDevices = 0;
			Connect = 0;
			WAIT(10)
			{
				Connect = 1;
			}
		}
		
		// IF CONNECTED, INITIALIZE DATA ON DSP CONNECTION
		ELSE IF (FIND("login_success",forParsing$))
		{
		    iLoggedIn = 1;
			ConnectFToDevices = 1;
		}
		
		// IF LOGIN REQUIRED, PASS ALONG USERNAME AND PASSWORD
		ELSE IF(FIND("login_required",forParsing$))
		{
		    iLoggedIn = 0;
			ConnectFToDevices = 0;
		    // SEND LOGIN DATA FROM DSP STRUCTURE
			toSend$ = "login " + spUsername + " " + spPin + "\n";
		    SendToQsys (toSend$);
		}
		
		ELSE IF (FIND("bad_id",forParsing$))
		{
			iLoggedIn = 1;
			ConnectFToDevices = 1;
		}
		
		// CORE STATUS RESPONSE
		ELSE IF (FIND("sr",forParsing$))
		{
			junk$ = REMOVE("\"",forParsing$);
			sDesignName = REMOVE("\" \"",forParsing$);
			sDesignName = LEFT(sDesignName, LEN(sDesignName)-3);
			sDesignID = REMOVE("\" ",forParsing$);
			sDesignID = LEFT(sDesignID, LEN(sDesignID)-2);
			iPrimary = ATOI( REMOVE(" ", forParsing$) );
			iActive = ATOI( REMOVE(" ", forParsing$) );
		}
		
		// PASS ON CV AND CGPA responses to devices 
		ELSE //IF(FIND("cv",forParsing$) || FIND("cgpa", forParsing$))
		{
			toDevices = forParsing$; //pass everything else on to devices
			ProcessLogic();
		}
	}
  }
  catch
  {
  }
}

threadsafe CHANGE FromDevices
{
	try
	{
		while (1)
		{
			ToClient = GATHER("\n",fromDevices);
		}
	}
	catch
	{
	}
}

PUSH ConnectF
{
	String toSend$[STRING_LENGTH_MAX];
	toSend$ = "cg testconnection\n"; //returns bad_id if no login is required. Returns login_required if login required.
	SendToQsys(toSend$);
}

RELEASE ConnectF
{
	iLoggedIn = 0;
	ConnectFToDevices = 0;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
	
	Connect = 1;
	
    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	
	iSequence = 0; 	
	
	while (1) 
 	{
		iSequence = iSequence + 1;
		
		if (iSequence = 10)
		{
			SendToQsys("sg\n"); // Status Get
			iSequence = 0;
		}
		
		delay(500); // 1 second delay
	}
}
